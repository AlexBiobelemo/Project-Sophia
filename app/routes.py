"""Defines the routes and view functions for the Sophia application."""

import numpy as np
import sqlalchemy as sa
from flask import (Blueprint, render_template, flash, redirect, url_for,
                   request, current_app, jsonify)
from flask_login import current_user, login_user, logout_user, login_required

from app import db, ai_services
from app.forms import (RegistrationForm, LoginForm, SnippetForm,
                       AIGenerationForm, CollectionForm)
from app.models import User, Snippet, Collection

# Create the main Blueprint
bp = Blueprint('main', __name__)


@bp.route('/')
@bp.route('/index')
def index():
    """Renders the homepage, displaying snippets for logged-in users."""
    page = request.args.get('page', 1, type=int)
    pagination = None
    if current_user.is_authenticated:
        # Query for the user's snippets and paginate the results
        pagination = current_user.snippets.order_by(Snippet.timestamp.desc()).paginate(
            page=page, per_page=current_app.config['POSTS_PER_PAGE'], error_out=False)

    return render_template('index.html', title='Home', snippets=pagination)


@bp.route('/login', methods=['GET', 'POST'])
def login():
    """Handles user login."""
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    form = LoginForm()
    if form.validate_on_submit():
        user = db.session.scalar(
            sa.select(User).where(User.username == form.username.data))
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password', 'danger')
            return redirect(url_for('main.login'))
        login_user(user, remember=form.remember_me.data)
        return redirect(url_for('main.index'))
    return render_template('login.html', title='Sign In', form=form)


@bp.route('/logout')
def logout():
    """Handles user logout."""
    logout_user()
    return redirect(url_for('main.index'))


@bp.route('/register', methods=['GET', 'POST'])
def register():
    """Handles new user registration."""
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Congratulations, you are now a registered user!', 'success')
        return redirect(url_for('main.login'))
    return render_template('register.html', title='Register', form=form)


@bp.route('/snippet/<int:snippet_id>')
@login_required
def view_snippet(snippet_id):
    """Displays a single code snippet in detail."""
    snippet = db.session.get(Snippet, snippet_id)
    # Security check: ensure snippet exists and belongs to the current user
    if snippet is None or snippet.author != current_user:
        flash('Snippet not found or you do not have permission to view it.', 'danger')
        return redirect(url_for('main.index'))
    return render_template('view_snippet.html', title=snippet.title, snippet=snippet)


@bp.route('/create_snippet', methods=['GET', 'POST'])
@login_required
def create_snippet():
    """Handles creation of new snippets."""
    form = SnippetForm()
    # Populate the collection dropdown with the user's collections
    form.collection.choices = [(c.id, c.name) for c in current_user.collections.all()]
    form.collection.choices.insert(0, (0, '--- No Collection ---'))

    if request.method == 'GET':
        # If code was generated by AI, pre-populate the form
        generated_code = request.args.get('generated_code')
        if generated_code:
            form.code.data = generated_code

    if form.validate_on_submit():
        collection_id = form.collection.data if form.collection.data != 0 else None
        snippet = Snippet(
            title=form.title.data,
            description=form.description.data,
            code=form.code.data,
            author=current_user,
            tags=form.tags.data,
            language=form.language.data,
            collection_id=collection_id
        )
        snippet.generate_and_set_embedding()
        db.session.add(snippet)
        db.session.commit()
        flash('Your snippet has been saved!', 'success')
        return redirect(url_for('main.index'))

    return render_template('create_snippet.html', title='Create Snippet', form=form)


@bp.route('/snippet/<int:snippet_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_snippet(snippet_id):
    """Handles editing an existing snippet."""
    snippet = db.session.get(Snippet, snippet_id)
    if snippet is None or snippet.author != current_user:
        flash('Snippet not found or you do not have permission to edit it.', 'danger')
        return redirect(url_for('main.index'))

    form = SnippetForm(obj=snippet)
    form.collection.choices = [(c.id, c.name) for c in current_user.collections.all()]
    form.collection.choices.insert(0, (0, '--- No Collection ---'))

    if form.validate_on_submit():
        collection_id = form.collection.data if form.collection.data != 0 else None
        snippet.title = form.title.data
        snippet.description = form.description.data
        snippet.code = form.code.data
        snippet.tags = form.tags.data
        snippet.language = form.language.data
        snippet.collection_id = collection_id
        snippet.generate_and_set_embedding()
        db.session.commit()
        flash('Your snippet has been updated!', 'success')
        return redirect(url_for('main.view_snippet', snippet_id=snippet.id))

    elif request.method == 'GET':
        # Pre-select the correct collection in the dropdown
        form.collection.data = snippet.collection_id or 0

    return render_template('edit_snippet.html', title='Edit Snippet', form=form, snippet=snippet)


@bp.route('/snippet/<int:snippet_id>/delete', methods=['POST'])
@login_required
def delete_snippet(snippet_id):
    """Handles deleting a snippet."""
    snippet = db.session.get(Snippet, snippet_id)
    if snippet is None or snippet.author != current_user:
        flash('Snippet not found or you do not have permission to delete it.', 'danger')
        return redirect(url_for('main.index'))

    db.session.delete(snippet)
    db.session.commit()
    flash('Your snippet has been deleted.', 'success')
    return redirect(url_for('main.index'))


@bp.route('/generate', methods=['GET', 'POST'])
@login_required
def generate():
    """Renders the AI code generation page and handles form submission."""
    form = AIGenerationForm()
    if form.validate_on_submit():
        prompt = form.prompt.data
        flash('Generating your code... please wait.', 'info')
        generated_code = ai_services.generate_code_from_prompt(prompt)
        # Redirect to create page with code pre-filled
        return redirect(url_for('main.create_snippet', generated_code=generated_code))

    return render_template('generate.html', title='AI Code Generation', form=form)


@bp.route('/explain', methods=['POST'])
@login_required
def explain():
    """API endpoint to get an AI explanation for a code block."""
    data = request.get_json()
    if not data or 'code' not in data:
        return jsonify({'error': 'Missing code in request.'}), 400

    code = data['code']
    explanation = ai_services.explain_code(code)
    return jsonify({'explanation': explanation})


@bp.route('/suggest-tags', methods=['POST'])
@login_required
def suggest_tags():
    """API endpoint to get AI-suggested tags for code."""
    data = request.get_json()
    if not data or 'code' not in data:
        return jsonify({'error': 'Missing code in request.'}), 400

    code = data['code']
    suggested_tags = ai_services.suggest_tags_for_code(code)
    return jsonify({'tags': suggested_tags})


@bp.route('/search')
@login_required
def search():
    """Handles semantic search for snippets."""
    query = request.args.get('q', '')
    if not query:
        return redirect(url_for('main.index'))

    query_embedding = ai_services.generate_embedding(
        query, task_type="RETRIEVAL_QUERY")
    if query_embedding is None:
        flash('Could not process your search query.', 'danger')
        return redirect(url_for('main.index'))

    snippets_with_embeddings = current_user.snippets.filter(
        Snippet.embedding.isnot(None)).all()
    if not snippets_with_embeddings:
        return render_template('search_results.html', title='Search Results', results=[], query=query)

    query_vector = np.array(query_embedding)
    snippet_vectors = {s.id: np.array(s.embedding)
                       for s in snippets_with_embeddings}

    def cosine_similarity(v1, v2):
        return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))

    similarities = {
        sid: cosine_similarity(query_vector, s_vector)
        for sid, s_vector in snippet_vectors.items()
    }

    # Use a more lenient threshold to allow relevant results through
    SIMILARITY_THRESHOLD = 0.65  # You can tune this value

    relevant_ids = {
        sid: score for sid, score in similarities.items()
        if score > SIMILARITY_THRESHOLD
    }

    if not relevant_ids:
        return render_template('search_results.html', title='Search Results', results=[], query=query)

    sorted_snippet_ids = sorted(
        relevant_ids, key=relevant_ids.get, reverse=True)

    snippet_map = {s.id: s for s in snippets_with_embeddings}
    sorted_snippets = [snippet_map[sid] for sid in sorted_snippet_ids]

    return render_template('search_results.html', title='Search Results', results=sorted_snippets, query=query)


@bp.route('/collections', methods=['GET', 'POST'])
@login_required
def collections():
    """Page for viewing and managing collections."""
    form = CollectionForm()
    if form.validate_on_submit():
        collection = Collection(name=form.name.data, user_id=current_user.id)
        db.session.add(collection)
        db.session.commit()
        flash('New collection created!', 'success')
        return redirect(url_for('main.collections'))

    user_collections = db.session.query(Collection).filter_by(
        user_id=current_user.id).order_by(Collection.timestamp.desc()).all()
    return render_template('collections.html', title='My Collections', form=form, collections=user_collections)


@bp.route('/collection/<int:collection_id>')
@login_required
def view_collection(collection_id):
    """Page to view all snippets within a single collection."""
    page = request.args.get('page', 1, type=int)
    collection = db.session.get(Collection, collection_id)
    if collection is None or collection.owner != current_user:
        flash('Collection not found.', 'danger')
        return redirect(url_for('main.collections'))

    # Query for snippets in this collection and paginate the results
    pagination = collection.snippets.order_by(Snippet.timestamp.desc()).paginate(
        page=page, per_page=current_app.config['POSTS_PER_PAGE'], error_out=False)
    return render_template(
        'view_collection.html',
        title=f"Collection: {collection.name}",
        collection=collection,
        snippets=pagination
    )


@bp.route('/collection/<int:collection_id>/rename', methods=['GET', 'POST'])
@login_required
def rename_collection(collection_id):
    """Handles renaming a collection."""
    collection = db.session.get(Collection, collection_id)
    if collection is None or collection.owner != current_user:
        flash('Collection not found.', 'danger')
        return redirect(url_for('main.collections'))

    form = CollectionForm()
    if form.validate_on_submit():
        collection.name = form.name.data
        db.session.commit()
        flash('Collection has been renamed!', 'success')
        return redirect(url_for('main.collections'))

    elif request.method == 'GET':
        form.name.data = collection.name

    return render_template('rename_collection.html', title='Rename Collection', form=form)


@bp.route('/collection/<int:collection_id>/delete', methods=['POST'])
@login_required
def delete_collection(collection_id):
    """Handles deleting a collection."""
    collection = db.session.get(Collection, collection_id)
    if collection is None or collection.owner != current_user:
        flash('Collection not found.', 'danger')
        return redirect(url_for('main.collections'))

    # Un-assign snippets from the collection before deleting it
    for snippet in collection.snippets:
        snippet.collection_id = None

    db.session.delete(collection)
    db.session.commit()
    flash('Collection deleted successfully.', 'success')
    return redirect(url_for('main.collections'))